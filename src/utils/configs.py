import os
from dotenv import load_dotenv

load_dotenv()

###########
##  APP  ##

APP_DEBUG: bool = True

WANDB_DISABLED = "WANDB_DISABLED" not in os.environ or os.environ["WANDB_DISABLED"] == "true"

###################
##  NN FEATURES  ##

N_QUESTION_TOKENS: int = 30
N_PASSAGE_TOKENS: int = 50

N_NER_CLASSES: int = 13
N_POS_CLASSES: int = 46

DIM_EMBEDDING: int = 50
DIM_EXACT_MATCH: int = 3
DIM_TOKEN_TF: int = 1

##################
##  NN + TRAIN  ##

NN_EPOCHS = 10
NN_BATCH_SIZE = 512
NN_LEARNING_RATE = 1e-3

NN_START_LEARNING_RATE = 5e-3
NN_END_LEARNING_RATE = 3e-3
NN_WARMUP_LEARNING_RATE = 5e-3

NN_LEARNING_RATE_WARMUP_PHASE = 0.0
NN_LEARNING_RATE_DECAY_PHASE = 1.0
NN_LEARNING_RATE_STATIC_PHASE = 0.0

NN_LEARNING_RATE_CYCLIC_PHASE = 0.3

assert NN_LEARNING_RATE_WARMUP_PHASE + NN_LEARNING_RATE_DECAY_PHASE + NN_LEARNING_RATE_STATIC_PHASE == 1.0
assert NN_LEARNING_RATE_CYCLIC_PHASE <= 1.0

NN_EPOCHS_WARMUP = int(round((NN_EPOCHS) * NN_LEARNING_RATE_WARMUP_PHASE, 1))
NN_EPOCHS_DECAY = int(round((NN_EPOCHS) * NN_LEARNING_RATE_DECAY_PHASE, 1))
NN_EPOCHS_STATIC = int(round((NN_EPOCHS) * NN_LEARNING_RATE_STATIC_PHASE, 1))

NN_EPOCHS_CYCLE = int(round((NN_EPOCHS) * NN_LEARNING_RATE_CYCLIC_PHASE, 1))

NN_LEARNING_RATE_TYPE = "custom"

N_KFOLD_BUCKETS = 5
